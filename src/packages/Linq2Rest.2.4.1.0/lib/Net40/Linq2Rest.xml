<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Linq2Rest</name>
  </assembly>
  <members>
    <member name="T:Linq2Rest.IModelFilter`1">
      <summary>
            Defines the public interface for a model filter.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to filter.</typeparam>
    </member>
    <member name="M:Linq2Rest.IModelFilter`1.Filter(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Filters the passed collection with the defined filter.
            </summary>
      <param name="source">The source items to filter.</param>
      <returns>A filtered enumeration and projected of the source items.</returns>
      <requires exception="T:System.ArgumentNullException">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
    </member>
    <member name="T:Linq2Rest.Implementations.JsonDataContractSerializerFactory">
      <summary>
            Defines the JsonDataContractSerializer factory.
            </summary>
      <invariant>_knownTypes != null</invariant>
    </member>
    <member name="T:Linq2Rest.Provider.ISerializerFactory">
      <summary>
            Defines the public interface for a factory of <see cref="T:Linq2Rest.Provider.ISerializer`1" />.
            </summary>
    </member>
    <member name="M:Linq2Rest.Provider.ISerializerFactory.Create``1">
      <summary>
            Creates an instance of an <see cref="T:Linq2Rest.Provider.ISerializer`1" />.
            </summary>
      <typeparam name="T">The item type for the serializer.</typeparam>
      <returns>An instance of an <see cref="T:Linq2Rest.Provider.ISerializer`1" />.</returns>
      <ensures>Contract.Result&lt;ISerializer&lt;T&gt;&gt;() != null</ensures>
    </member>
    <member name="M:Linq2Rest.Implementations.JsonDataContractSerializerFactory.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Implementations.JsonDataContractSerializerFactory" /> class.
            </summary>
      <param name="knownTypes">A number of known types for serialization resolution.</param>
      <requires exception="T:System.ArgumentNullException">knownTypes != null</requires>
      <exception cref="T:System.ArgumentNullException">knownTypes == null</exception>
    </member>
    <member name="M:Linq2Rest.Implementations.JsonDataContractSerializerFactory.Create``1">
      <summary>
            Creates an instance of an <see cref="T:Linq2Rest.Provider.ISerializer`1" />.
            </summary>
      <typeparam name="T">The item type for the serializer.</typeparam>
      <returns>An instance of an <see cref="T:Linq2Rest.Provider.ISerializer`1" />.</returns>
      <ensures inheritedFrom="M:Linq2Rest.Provider.ISerializerFactory.Create``1" inheritedFromTypeName="ISerializerFactory">Contract.Result&lt;ISerializer&lt;T&gt;&gt;() != null</ensures>
    </member>
    <member name="T:Linq2Rest.Provider.ISerializer`1">
      <summary>
            Defines the public interface for an object serializer.
            </summary>
      <typeparam name="T" />
    </member>
    <member name="M:Linq2Rest.Provider.ISerializer`1.Deserialize(System.IO.Stream)">
      <summary>
            Deserializes a single item.
            </summary>
      <param name="input">The serialized item.</param>
      <returns>An instance of the serialized item.</returns>
    </member>
    <member name="M:Linq2Rest.Provider.ISerializer`1.DeserializeList(System.IO.Stream)">
      <summary>
            Deserializes a list of items.
            </summary>
      <param name="input">The serialized items.</param>
      <returns>An list of the serialized items.</returns>
    </member>
    <member name="T:Linq2Rest.Implementations.RestClientBase">
      <summary>
            Defines the base REST client implementation.
            </summary>
      <invariant>_acceptHeader != null</invariant>
    </member>
    <member name="T:Linq2Rest.Provider.IRestClient">
      <summary>
            Defines the public interface for a REST client.
            </summary>
    </member>
    <member name="M:Linq2Rest.Provider.IRestClient.Get(System.Uri)">
      <summary>
            Gets a service response.
            </summary>
      <param name="uri">The <see cref="T:System.Uri" /> to load the resource from.</param>
      <returns>A string representation of the resource.</returns>
      <requires exception="T:System.ArgumentNullException">uri != null</requires>
      <exception cref="T:System.ArgumentNullException">uri == null</exception>
      <requires exception="T:System.ArgumentException">uri.Scheme == Uri.UriSchemeHttp || uri.Scheme == Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">uri.Scheme != Uri.UriSchemeHttp &amp;&amp; uri.Scheme != Uri.UriSchemeHttps</exception>
      <ensures>Contract.Result&lt;Stream&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Provider.IRestClient.ServiceBase">
      <summary>
            Gets the base <see cref="T:System.Uri" /> for the REST service.
            </summary>
      <getter>
        <ensures>Contract.Result&lt;Uri&gt;() != null</ensures>
        <ensures>Contract.Result&lt;Uri&gt;().Scheme == Uri.UriSchemeHttp || Contract.Result&lt;Uri&gt;().Scheme == Uri.UriSchemeHttps</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Implementations.RestClientBase.#ctor(System.Uri,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Implementations.RestClientBase" /> class.
            </summary>
      <param name="uri">The base <see cref="T:System.Uri" /> for the REST service.</param>
      <param name="acceptHeader">The accept header to use in web requests.</param>
      <requires exception="T:System.ArgumentNullException">uri != null</requires>
      <exception cref="T:System.ArgumentNullException">uri == null</exception>
      <requires exception="T:System.ArgumentException">uri.Scheme == Uri.UriSchemeHttp || uri.Scheme == Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">uri.Scheme != Uri.UriSchemeHttp &amp;&amp; uri.Scheme != Uri.UriSchemeHttps</exception>
      <requires exception="T:System.ArgumentException">!string.IsNullOrWhiteSpace(acceptHeader)</requires>
      <exception cref="T:System.ArgumentException">string.IsNullOrWhiteSpace(acceptHeader)</exception>
    </member>
    <member name="M:Linq2Rest.Implementations.RestClientBase.Get(System.Uri)">
      <summary>
            Gets a service response.
            </summary>
      <param name="uri">The <see cref="T:System.Uri" /> to load the resource from.</param>
      <returns>A string representation of the resource.</returns>
      <requires inheritedFrom="M:Linq2Rest.Provider.IRestClient.Get(System.Uri)" inheritedFromTypeName="IRestClient" exception="T:System.ArgumentNullException">uri != null</requires>
      <exception cref="T:System.ArgumentNullException">uri == null</exception>
      <requires inheritedFrom="M:Linq2Rest.Provider.IRestClient.Get(System.Uri)" inheritedFromTypeName="IRestClient" exception="T:System.ArgumentException">uri.Scheme == Uri.UriSchemeHttp || uri.Scheme == Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">uri.Scheme != Uri.UriSchemeHttp &amp;&amp; uri.Scheme != Uri.UriSchemeHttps</exception>
      <ensures inheritedFrom="M:Linq2Rest.Provider.IRestClient.Get(System.Uri)" inheritedFromTypeName="IRestClient">Contract.Result&lt;Stream&gt;() != null</ensures>
    </member>
    <member name="M:Linq2Rest.Implementations.RestClientBase.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Linq2Rest.Implementations.RestClientBase.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">True if disposing managed types.</param>
    </member>
    <member name="P:Linq2Rest.Implementations.RestClientBase.ServiceBase">
      <summary>
            Gets the base <see cref="T:System.Uri" /> for the REST service.
            </summary>
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Provider.IRestClient.get_ServiceBase" inheritedFromTypeName="IRestClient">Contract.Result&lt;Uri&gt;() != null</ensures>
        <ensures inheritedFrom="M:Linq2Rest.Provider.IRestClient.get_ServiceBase" inheritedFromTypeName="IRestClient">Contract.Result&lt;Uri&gt;().Scheme == Uri.UriSchemeHttp || Contract.Result&lt;Uri&gt;().Scheme == Uri.UriSchemeHttps</ensures>
      </getter>
    </member>
    <member name="T:Linq2Rest.Implementations.XmlDataContractSerializerFactory">
      <summary>
            Defines the XmlDataContractSerializer factory.
            </summary>
      <invariant>_knownTypes != null</invariant>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlDataContractSerializerFactory.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Implementations.XmlDataContractSerializerFactory" /> class.
            </summary>
      <param name="knownTypes">A number of known types for serialization resolution.</param>
      <requires exception="T:System.ArgumentNullException">knownTypes != null</requires>
      <exception cref="T:System.ArgumentNullException">knownTypes == null</exception>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlDataContractSerializerFactory.Create``1">
      <summary>
            Creates an instance of an <see cref="T:Linq2Rest.Provider.ISerializer`1" />.
            </summary>
      <typeparam name="T">The item type for the serializer.</typeparam>
      <returns>An instance of an <see cref="T:Linq2Rest.Provider.ISerializer`1" />.</returns>
      <ensures inheritedFrom="M:Linq2Rest.Provider.ISerializerFactory.Create``1" inheritedFromTypeName="ISerializerFactory">Contract.Result&lt;ISerializer&lt;T&gt;&gt;() != null</ensures>
    </member>
    <member name="T:Linq2Rest.Implementations.XmlRestClient">
      <summary>
            Defines a REST client implementation for JSON requests.
            </summary>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlRestClient.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Implementations.XmlRestClient" /> class.
            </summary>
      <param name="uri">The base <see cref="T:System.Uri" /> for the REST service.</param>
      <requires exception="T:System.ArgumentNullException">uri != null</requires>
      <exception cref="T:System.ArgumentNullException">uri == null</exception>
      <requires exception="T:System.ArgumentException">uri.Scheme == Uri.UriSchemeHttp || uri.Scheme == Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">uri.Scheme != Uri.UriSchemeHttp &amp;&amp; uri.Scheme != Uri.UriSchemeHttps</exception>
    </member>
    <member name="T:Linq2Rest.Implementations.XmlSerializerFactory">
      <summary>
            Defines the XmlSerializer factory.
            </summary>
      <invariant>_knownTypes != null</invariant>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlSerializerFactory.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Implementations.XmlSerializerFactory" /> class.
            </summary>
      <param name="knownTypes">A number of known types for serialization resolution.</param>
      <requires exception="T:System.ArgumentNullException">knownTypes != null</requires>
      <exception cref="T:System.ArgumentNullException">knownTypes == null</exception>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlSerializerFactory.Create``1">
      <summary>
            Creates an instance of an <see cref="T:Linq2Rest.Provider.ISerializer`1" />.
            </summary>
      <typeparam name="T">The item type for the serializer.</typeparam>
      <returns>An instance of an <see cref="T:Linq2Rest.Provider.ISerializer`1" />.</returns>
      <ensures inheritedFrom="M:Linq2Rest.Provider.ISerializerFactory.Create``1" inheritedFromTypeName="ISerializerFactory">Contract.Result&lt;ISerializer&lt;T&gt;&gt;() != null</ensures>
    </member>
    <member name="T:Linq2Rest.IRuntimeTypeProvider">
      <summary>
            Provides a type matching the provided members.
            </summary>
    </member>
    <member name="M:Linq2Rest.IRuntimeTypeProvider.Get(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>
            Gets the <see cref="T:System.Type" /> matching the provided members.
            </summary>
      <param name="sourceType">The <see cref="T:System.Type" /> to generate the runtime type from.</param>
      <param name="properties">The <see cref="T:System.Reflection.MemberInfo" /> to use to generate properties.</param>
      <returns>A <see cref="T:System.Type" /> mathing the provided properties.</returns>
      <requires exception="T:System.ArgumentNullException">sourceType != null</requires>
      <exception cref="T:System.ArgumentNullException">sourceType == null</exception>
      <requires exception="T:System.ArgumentNullException">properties != null</requires>
      <exception cref="T:System.ArgumentNullException">properties == null</exception>
    </member>
    <member name="T:Linq2Rest.ModelFilterExtensions">
      <summary>
            Defines extension methods for model filters.
            </summary>
    </member>
    <member name="M:Linq2Rest.ModelFilterExtensions.Filter``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Specialized.NameValueCollection)">
      <summary>
            Filters the source collection using the passed query parameters.
            </summary>
      <param name="source">The source items to filter.</param>
      <param name="query">The query parameters defining the filter.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of items in the source collection.</typeparam>
      <returns>A filtered and projected enumeration of the source collection.</returns>
      <requires exception="T:System.ArgumentNullException">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
      <requires exception="T:System.ArgumentNullException">query != null</requires>
      <exception cref="T:System.ArgumentNullException">query == null</exception>
    </member>
    <member name="M:Linq2Rest.ModelFilterExtensions.Filter``1(System.Collections.Generic.IEnumerable{``0},Linq2Rest.IModelFilter{``0})">
      <summary>
            Filters the source collection using the passed query parameters.
            </summary>
      <param name="source">The source items to filter.</param>
      <param name="filter">The filter to apply.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of items in the source collection.</typeparam>
      <returns>A filtered and projected enumeration of the source collection.</returns>
      <requires exception="T:System.ArgumentNullException">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
    </member>
    <member name="T:Linq2Rest.Parser.FilterExpressionFactory">
      <summary>
            Defines the FilterExpressionFactory.
            </summary>
    </member>
    <member name="T:Linq2Rest.Parser.IFilterExpressionFactory">
      <summary>
            Defines the public interface for a FilterExpressionFactory.
            </summary>
    </member>
    <member name="M:Linq2Rest.Parser.IFilterExpressionFactory.Create``1(System.String)">
      <summary>
            Creates a filter expression from its string representation.
            </summary>
      <param name="filter">The string representation of the filter.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to filter.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> if the passed filter is valid, otherwise null.</returns>
    </member>
    <member name="M:Linq2Rest.Parser.IFilterExpressionFactory.Create``1(System.String,System.IFormatProvider)">
      <summary>
            Creates a filter expression from its string representation.
            </summary>
      <param name="filter">The string representation of the filter.</param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use when reading the filter.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to filter.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> if the passed filter is valid, otherwise null.</returns>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.Create``1(System.String)">
      <summary>
            Creates a filter expression from its string representation.
            </summary>
      <param name="filter">The string representation of the filter.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to filter.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> if the passed filter is valid, otherwise null.</returns>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.Create``1(System.String,System.IFormatProvider)">
      <summary>
            Creates a filter expression from its string representation.
            </summary>
      <param name="filter">The string representation of the filter.</param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use when reading the filter.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to filter.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> if the passed filter is valid, otherwise null.</returns>
    </member>
    <member name="T:Linq2Rest.Parser.FilterExpressionFactory.ParameterVisitor">
      <summary>
            Used to get the ParameterExpressions used in an Expression so that Expression.Call will have the correct number of parameters supplied.
            </summary>
    </member>
    <member name="T:Linq2Rest.Parser.IMemberNameResolver">
      <summary>
            Defines the public interface for a resolver of <see cref="T:System.Reflection.MemberInfo" /> name.
            </summary>
    </member>
    <member name="M:Linq2Rest.Parser.IMemberNameResolver.ResolveName(System.Reflection.MemberInfo)">
      <summary>
            Returns the resolved name for the <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> to resolve the name of.</param>
      <returns>The resolved name.</returns>
      <requires exception="T:System.ArgumentNullException">member != null</requires>
      <exception cref="T:System.ArgumentNullException">member == null</exception>
      <ensures>Contract.Result&lt;string&gt;() != null</ensures>
    </member>
    <member name="T:Linq2Rest.Parser.IParameterParser`1">
      <summary>
            Defines the public interface for a parameter parser.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of object to parse parameters for.</typeparam>
    </member>
    <member name="M:Linq2Rest.Parser.IParameterParser`1.Parse(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Parses the passes parameters into a <see cref="T:Linq2Rest.ModelFilter`1" />.
            </summary>
      <param name="queryParameters">The parameters to parse.</param>
      <returns>A <see cref="T:Linq2Rest.ModelFilter`1" /> representing the restrictions in the parameters.</returns>
      <requires exception="T:System.ArgumentNullException">queryParameters != null</requires>
      <exception cref="T:System.ArgumentNullException">queryParameters == null</exception>
    </member>
    <member name="T:Linq2Rest.Parser.ISelectExpressionFactory`1">
      <summary>
            Defines the public interface for a SelectExpressionFactory.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> to create expression for.</typeparam>
    </member>
    <member name="M:Linq2Rest.Parser.ISelectExpressionFactory`1.Create(System.String)">
      <summary>
            Creates a select expression.
            </summary>
      <param name="selection">The properties to select.</param>
      <returns>An instance of a <see cref="T:System.Func`2" />.</returns>
    </member>
    <member name="T:Linq2Rest.Parser.ISortExpressionFactory">
      <summary>
            Defines the public interface for a SortExpressionFactory.
            </summary>
    </member>
    <member name="M:Linq2Rest.Parser.ISortExpressionFactory.Create``1(System.String)">
      <summary>
            Creates an enumeration of sort descriptions from its string representation.
            </summary>
      <param name="filter">The string representation of the sort descriptions.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to sort.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> if the passed sort descriptions are valid, otherwise null.</returns>
    </member>
    <member name="T:Linq2Rest.Parser.ParameterParser`1">
      <summary>
            Defines the default implementation of a parameter parser.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to create parser for.</typeparam>
      <invariant>_filterExpressionFactory != null</invariant>
      <invariant>_sortExpressionFactory != null</invariant>
      <invariant>_selectExpressionFactory != null</invariant>
    </member>
    <member name="M:Linq2Rest.Parser.ParameterParser`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Parser.ParameterParser`1" /> class.
            </summary>
    </member>
    <member name="M:Linq2Rest.Parser.ParameterParser`1.#ctor(Linq2Rest.Parser.IFilterExpressionFactory,Linq2Rest.Parser.ISortExpressionFactory,Linq2Rest.Parser.ISelectExpressionFactory{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Parser.ParameterParser`1" /> class.
            </summary>
      <param name="filterExpressionFactory">The <see cref="T:Linq2Rest.Parser.IFilterExpressionFactory" /> to use.</param>
      <param name="sortExpressionFactory">The <see cref="T:Linq2Rest.Parser.ISortExpressionFactory" /> to use.</param>
      <param name="selectExpressionFactory">The <see cref="T:Linq2Rest.Parser.ISelectExpressionFactory`1" /> to use.</param>
      <requires exception="T:System.ArgumentNullException">filterExpressionFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">filterExpressionFactory == null</exception>
      <requires exception="T:System.ArgumentNullException">sortExpressionFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">sortExpressionFactory == null</exception>
      <requires exception="T:System.ArgumentNullException">selectExpressionFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">selectExpressionFactory == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.ParameterParser`1.Parse(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Parses the passes query parameters to a <see cref="T:Linq2Rest.ModelFilter`1" />.
            </summary>
      <param name="queryParameters" />
      <returns />
      <requires inheritedFrom="M:Linq2Rest.Parser.IParameterParser`1.Parse(System.Collections.Specialized.NameValueCollection)" inheritedFromTypeName="IParameterParser" exception="T:System.ArgumentNullException">queryParameters != null</requires>
      <exception cref="T:System.ArgumentNullException">queryParameters == null</exception>
    </member>
    <member name="T:Linq2Rest.Parser.SelectExpressionFactory`1">
      <summary>
            Defines the SelectExpressionFactory.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of object to project.</typeparam>
      <invariant>_knownSelections != null</invariant>
      <invariant>_nameResolver != null</invariant>
      <invariant>_runtimeTypeProvider != null</invariant>
    </member>
    <member name="M:Linq2Rest.Parser.SelectExpressionFactory`1.#ctor(Linq2Rest.Parser.IMemberNameResolver,Linq2Rest.IRuntimeTypeProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Parser.SelectExpressionFactory`1" /> class.
            </summary>
      <requires exception="T:System.ArgumentNullException">nameResolver != null</requires>
      <exception cref="T:System.ArgumentNullException">nameResolver == null</exception>
      <requires exception="T:System.ArgumentNullException">runtimeTypeProvider != null</requires>
      <exception cref="T:System.ArgumentNullException">runtimeTypeProvider == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.SelectExpressionFactory`1.Create(System.String)">
      <summary>
            Creates a select expression.
            </summary>
      <param name="selection">The properties to select.</param>
      <returns>An instance of a <see cref="T:System.Func`2" />.</returns>
    </member>
    <member name="T:Linq2Rest.Parser.SortDescription`1">
      <summary>
            Defines a sort description.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> to sort.</typeparam>
      <invariant>_keySelector != null</invariant>
    </member>
    <member name="M:Linq2Rest.Parser.SortDescription`1.#ctor(System.Linq.Expressions.Expression,System.Web.UI.WebControls.SortDirection)">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Parser.SortDescription`1" /> class.
            </summary>
      <param name="keySelector">The function to select the sort key.</param>
      <param name="direction">The sort direction.</param>
      <requires exception="T:System.ArgumentNullException">keySelector != null</requires>
      <exception cref="T:System.ArgumentNullException">keySelector == null</exception>
    </member>
    <member name="P:Linq2Rest.Parser.SortDescription`1.Direction">
      <summary>
            Gets the sort direction.
            </summary>
    </member>
    <member name="P:Linq2Rest.Parser.SortDescription`1.KeySelector">
      <summary>
            Gets the key to sort by.
            </summary>
    </member>
    <member name="T:Linq2Rest.Parser.SortExpressionFactory">
      <summary>
            Defines the SortExpressionFactory´.
            </summary>
    </member>
    <member name="M:Linq2Rest.Parser.SortExpressionFactory.Create``1(System.String)">
      <summary>
            Creates an enumeration of sort descriptions from its string representation.
            </summary>
      <param name="filter">The string representation of the sort descriptions.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to sort.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> if the passed sort descriptions are valid, otherwise null.</returns>
    </member>
    <member name="T:Linq2Rest.Provider.IExpressionWriter">
      <summary>
            Defines the public interface for an expression visitor.
            </summary>
    </member>
    <member name="M:Linq2Rest.Provider.IExpressionWriter.Write(System.Linq.Expressions.Expression)">
      <summary>
            Generates a string representation of the passed expression.
            </summary>
      <param name="expression">The <see cref="T:System.Linq.Expressions.Expression" /> to visit.</param>
      <returns>A string value.</returns>
    </member>
    <member name="T:Linq2Rest.Provider.ODataExpressionConverter">
      <summary>
            Converts LINQ expressions to OData queries.
            </summary>
      <invariant>this._writer != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.ODataExpressionConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Provider.ODataExpressionConverter" /> class.
            </summary>
    </member>
    <member name="M:Linq2Rest.Provider.ODataExpressionConverter.Convert``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
            Converts an expression into an OData formatted query.
            </summary>
      <param name="expression">The expression to convert.</param>
      <returns>An OData <see cref="T:System.String" /> representation.</returns>
    </member>
    <member name="T:Linq2Rest.Implementations.JsonRestClient">
      <summary>
            Defines a REST client implementation for JSON requests.
            </summary>
    </member>
    <member name="M:Linq2Rest.Implementations.JsonRestClient.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Implementations.JsonRestClient" /> class.
            </summary>
      <param name="uri">The base <see cref="T:System.Uri" /> for the REST service.</param>
      <requires exception="T:System.ArgumentNullException">uri != null</requires>
      <exception cref="T:System.ArgumentNullException">uri == null</exception>
      <requires exception="T:System.ArgumentException">uri.Scheme == Uri.UriSchemeHttp || uri.Scheme == Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">uri.Scheme != Uri.UriSchemeHttp &amp;&amp; uri.Scheme != Uri.UriSchemeHttps</exception>
    </member>
    <member name="T:Linq2Rest.Provider.QueryableExtensions">
      <summary>
            Defines extension methods on IQueryables.
            </summary>
    </member>
    <member name="M:Linq2Rest.Provider.QueryableExtensions.ExecuteAsync``1(System.Linq.IQueryable{``0})">
      <summary>
            Creates a task to execute the query.
            </summary>
      <param name="queryable">The <see cref="T:System.Linq.IQueryable`1" /> to execute.</param>
      <typeparam name="T">The generic type parameter.</typeparam>
      <returns>A task returning the query result.</returns>
      <requires exception="T:System.ArgumentNullException">queryable != null</requires>
      <exception cref="T:System.ArgumentNullException">queryable == null</exception>
    </member>
    <member name="M:Linq2Rest.Provider.QueryableExtensions.Expand``1(System.Linq.IQueryable{``0},System.String)">
      <summary>
            Expands the specified source.
            </summary>
      <typeparam name="TSource" />
      <param name="source">The source.</param>
      <param name="paths">The paths to expand in the format "Child1, Child2/GrandChild2".</param>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> for continued querying.</returns>
      <requires exception="T:System.ArgumentNullException">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
    </member>
    <member name="M:Linq2Rest.Provider.QueryableExtensions.Expand``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
      <summary>
            Expands the specified source.
            </summary>
      <typeparam name="TSource" />
      <param name="source">The source.</param>
      <param name="properties">The paths to expand.</param>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> for continued querying.</returns>
      <requires exception="T:System.ArgumentNullException">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
    </member>
    <member name="T:Linq2Rest.Provider.RestContext`1">
      <summary>
            Defines the RestContext.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of object to query.</typeparam>
      <invariant>_queryable != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.RestContext`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Provider.RestContext`1" /> class.
            </summary>
      <param name="client" />
      <param name="serializerFactory" />
      <requires exception="T:System.ArgumentNullException">client != null</requires>
      <exception cref="T:System.ArgumentNullException">client == null</exception>
      <requires exception="T:System.ArgumentNullException">serializerFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">serializerFactory == null</exception>
    </member>
    <member name="M:Linq2Rest.Provider.RestContext`1.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Linq2Rest.Provider.RestContext`1.Query">
      <summary>
            Gets the context query.
            </summary>
      <getter>
        <ensures>Contract.Result&lt;IQueryable&lt;T&gt;&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.Provider.RestQueryable`1.ElementType">
      <summary>
        <see cref="T:System.Type" /> of T in IQueryable of T.
            </summary>
      <getter>
        <ensures inheritedFrom="M:System.Linq.IQueryable.get_ElementType" inheritedFromTypeName="IQueryable">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.Provider.RestQueryable`1.Expression">
      <summary>
            	The expression tree.
            </summary>
      <getter>
        <ensures inheritedFrom="M:System.Linq.IQueryable.get_Expression" inheritedFromTypeName="IQueryable">Contract.Result&lt;Expression&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.Provider.RestQueryable`1.Provider">
      <summary>
            	IQueryProvider part of RestQueryable.
            </summary>
      <getter>
        <ensures inheritedFrom="M:System.Linq.IQueryable.get_Provider" inheritedFromTypeName="IQueryable">Contract.Result&lt;IQueryProvider&gt;() != null</ensures>
      </getter>
    </member>
    <member name="T:Linq2Rest.RuntimeTypeProvider">
      <summary>
            Defines the RuntimeTypeProvider.
            </summary>
    </member>
    <member name="M:Linq2Rest.RuntimeTypeProvider.#ctor(Linq2Rest.Parser.IMemberNameResolver)">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.RuntimeTypeProvider" /> class.
            </summary>
      <param name="nameResolver" />
      <requires>nameResolver != null</requires>
    </member>
    <member name="M:Linq2Rest.RuntimeTypeProvider.Get(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>
            Gets the <see cref="T:System.Type" /> matching the provided members.
            </summary>
      <param name="sourceType">The <see cref="T:System.Type" /> to generate the runtime type from.</param>
      <param name="properties">The <see cref="T:System.Reflection.MemberInfo" /> to use to generate properties.</param>
      <returns>A <see cref="T:System.Type" /> mathing the provided properties.</returns>
      <requires inheritedFrom="M:Linq2Rest.IRuntimeTypeProvider.Get(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})" inheritedFromTypeName="IRuntimeTypeProvider" exception="T:System.ArgumentNullException">sourceType != null</requires>
      <exception cref="T:System.ArgumentNullException">sourceType == null</exception>
      <requires inheritedFrom="M:Linq2Rest.IRuntimeTypeProvider.Get(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})" inheritedFromTypeName="IRuntimeTypeProvider" exception="T:System.ArgumentNullException">properties != null</requires>
      <exception cref="T:System.ArgumentNullException">properties == null</exception>
    </member>
    <member name="M:Linq2Rest.MethodProvider.GetAnyAllMethod(System.String,System.Type)">
      <requires>collectionType != null</requires>
    </member>
    <member name="M:Linq2Rest.MethodProvider.GetIEnumerableImpl(System.Type)">
      <requires>type != null</requires>
    </member>
    <member name="M:Linq2Rest.MethodProvider.GetGenericMethod(System.Type,System.String,System.Type[],System.Type[],System.Reflection.BindingFlags)">
      <requires>typeArgs != null</requires>
      <requires>type != null</requires>
    </member>
    <member name="M:Linq2Rest.MethodProvider.IsIEnumerable(System.Type)">
      <requires>type != null</requires>
    </member>
    <member name="P:Linq2Rest.MethodProvider.IndexOfMethod">
      <getter>
        <ensures>Contract.Result&lt;MethodInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.ContainsMethod">
      <getter>
        <ensures>Contract.Result&lt;MethodInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.EndsWithMethod">
      <getter>
        <ensures>Contract.Result&lt;MethodInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.StartsWithMethod">
      <getter>
        <ensures>Contract.Result&lt;MethodInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.LengthProperty">
      <getter>
        <ensures>Contract.Result&lt;PropertyInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.SubstringMethod">
      <getter>
        <ensures>Contract.Result&lt;MethodInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.ToLowerMethod">
      <getter>
        <ensures>Contract.Result&lt;MethodInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.ToUpperMethod">
      <getter>
        <ensures>Contract.Result&lt;MethodInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.TrimMethod">
      <getter>
        <ensures>Contract.Result&lt;MethodInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.DayProperty">
      <getter>
        <ensures>Contract.Result&lt;PropertyInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.HourProperty">
      <getter>
        <ensures>Contract.Result&lt;PropertyInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.MinuteProperty">
      <getter>
        <ensures>Contract.Result&lt;PropertyInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.SecondProperty">
      <getter>
        <ensures>Contract.Result&lt;PropertyInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.MonthProperty">
      <getter>
        <ensures>Contract.Result&lt;PropertyInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.YearProperty">
      <getter>
        <ensures>Contract.Result&lt;PropertyInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.DoubleRoundMethod">
      <getter>
        <ensures>Contract.Result&lt;MethodInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.DecimalRoundMethod">
      <getter>
        <ensures>Contract.Result&lt;MethodInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.DoubleFloorMethod">
      <getter>
        <ensures>Contract.Result&lt;MethodInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.DecimalFloorMethod">
      <getter>
        <ensures>Contract.Result&lt;MethodInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.DoubleCeilingMethod">
      <getter>
        <ensures>Contract.Result&lt;MethodInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.DecimalCeilingMethod">
      <getter>
        <ensures>Contract.Result&lt;MethodInfo&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.RuntimeTypeProvider.CreateProperty(System.Reflection.Emit.TypeBuilder,System.Collections.Generic.KeyValuePair{System.String,System.Reflection.MemberInfo})">
      <requires>typeBuilder != null</requires>
    </member>
    <member name="M:Linq2Rest.RuntimeTypeProvider.SetAttributes(System.Reflection.Emit.TypeBuilder,System.Type)">
      <requires>typeBuilder != null</requires>
    </member>
    <member name="M:Linq2Rest.RuntimeTypeProvider.SetAttributes(System.Reflection.Emit.PropertyBuilder,System.Reflection.MemberInfo)">
      <requires>propertyBuilder != null</requires>
      <requires>memberInfo != null</requires>
    </member>
    <member name="M:Linq2Rest.RuntimeTypeProvider.CreateCustomAttributeBuilders(System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData})">
      <requires>customAttributes != null</requires>
    </member>
    <member name="M:Linq2Rest.RuntimeTypeProvider.GetTypeKey(System.Type,System.Collections.Generic.Dictionary{System.String,System.Reflection.MemberInfo})">
      <requires>sourceType != null</requires>
      <requires>fields != null</requires>
    </member>
    <member name="T:Linq2Rest.Implementations.XmlSerializerFactory.XmlSerializer`1">
      <invariant>_serializer != null</invariant>
      <invariant>_listSerializer != null</invariant>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlSerializerFactory.XmlSerializer`1.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <requires>knownTypes != null</requires>
    </member>
    <member name="T:Linq2Rest.Implementations.XmlDataContractSerializerFactory.XmlDataContractSerializer`1">
      <invariant>_serializer != null</invariant>
      <invariant>_listSerializer != null</invariant>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlDataContractSerializerFactory.XmlDataContractSerializer`1.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <requires>knownTypes != null</requires>
    </member>
    <member name="T:Linq2Rest.Implementations.JsonDataContractSerializerFactory.JsonDataContractSerializer`1">
      <invariant>_serializer != null</invariant>
      <invariant>_listSerializer != null</invariant>
    </member>
    <member name="M:Linq2Rest.Implementations.JsonDataContractSerializerFactory.JsonDataContractSerializer`1.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <requires>knownTypes != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.QueryableExtensions.ResolvePropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <requires>property != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionWriter.GetUnconvertedType(System.Linq.Expressions.Expression)">
      <requires>expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionWriter.GetMemberCall(System.Linq.Expressions.MemberExpression)">
      <requires>memberExpression != null</requires>
      <ensures>Contract.Result&lt;string&gt;() != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionWriter.GetValue(System.Linq.Expressions.Expression)">
      <requires>input != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionWriter.GetOperation(System.Linq.Expressions.Expression)">
      <requires>expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionWriter.GetMethodCall(System.Linq.Expressions.MethodCallExpression,System.String)">
      <requires>expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionWriter.Write(System.Linq.Expressions.Expression,System.Type,System.String)">
      <requires>expression != null</requires>
      <requires>type != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.GuidValueWriter.Write(System.Object)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">value != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">Handles.IsAssignableFrom(value.GetType())</requires>
    </member>
    <member name="P:Linq2Rest.Provider.Writers.GuidValueWriter.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.get_Handles" inheritedFromTypeName="IValueWriter">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringValueWriter.Write(System.Object)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">value != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">Handles.IsAssignableFrom(value.GetType())</requires>
    </member>
    <member name="P:Linq2Rest.Provider.Writers.StringValueWriter.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.get_Handles" inheritedFromTypeName="IValueWriter">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)">
      <requires>value != null</requires>
      <requires>Handles.IsAssignableFrom(value.GetType())</requires>
    </member>
    <member name="P:Linq2Rest.Provider.Writers.IValueWriter.Handles">
      <getter>
        <ensures>Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.TimeSpanValueWriter.Write(System.Object)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">value != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">Handles.IsAssignableFrom(value.GetType())</requires>
    </member>
    <member name="P:Linq2Rest.Provider.Writers.TimeSpanValueWriter.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.get_Handles" inheritedFromTypeName="IValueWriter">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.ByteValueWriter.Write(System.Object)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">value != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">Handles.IsAssignableFrom(value.GetType())</requires>
    </member>
    <member name="P:Linq2Rest.Provider.Writers.ByteValueWriter.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.get_Handles" inheritedFromTypeName="IValueWriter">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.RationalValueWriter.Write(System.Object)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">value != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">Handles.IsAssignableFrom(value.GetType())</requires>
    </member>
    <member name="P:Linq2Rest.Provider.Writers.RationalValueWriter.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.get_Handles" inheritedFromTypeName="IValueWriter">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.DateTimeValueWriter.Write(System.Object)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">value != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">Handles.IsAssignableFrom(value.GetType())</requires>
    </member>
    <member name="P:Linq2Rest.Provider.Writers.DateTimeValueWriter.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.get_Handles" inheritedFromTypeName="IValueWriter">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StreamValueWriter.Write(System.Object)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">value != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">Handles.IsAssignableFrom(value.GetType())</requires>
    </member>
    <member name="P:Linq2Rest.Provider.Writers.StreamValueWriter.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.get_Handles" inheritedFromTypeName="IValueWriter">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.ByteArrayValueWriter.Write(System.Object)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">value != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">Handles.IsAssignableFrom(value.GetType())</requires>
    </member>
    <member name="P:Linq2Rest.Provider.Writers.ByteArrayValueWriter.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.get_Handles" inheritedFromTypeName="IValueWriter">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.BooleanValueWriter.Write(System.Object)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">value != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">Handles.IsAssignableFrom(value.GetType())</requires>
    </member>
    <member name="P:Linq2Rest.Provider.Writers.BooleanValueWriter.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.get_Handles" inheritedFromTypeName="IValueWriter">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.DateTimeOffsetValueWriter.Write(System.Object)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">value != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">Handles.IsAssignableFrom(value.GetType())</requires>
    </member>
    <member name="P:Linq2Rest.Provider.Writers.DateTimeOffsetValueWriter.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.get_Handles" inheritedFromTypeName="IValueWriter">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.IntegerValueWriter.Write(System.Object)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">value != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter">Handles.IsAssignableFrom(value.GetType())</requires>
    </member>
    <member name="P:Linq2Rest.Provider.Writers.IntegerValueWriter.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.get_Handles" inheritedFromTypeName="IValueWriter">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="T:Linq2Rest.Provider.RestQueryProvider`1">
      <invariant>_client != null</invariant>
      <invariant>_serializerFactory != null</invariant>
      <invariant>_expressionProcessor != null</invariant>
      <invariant>_parameterBuilder != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.RestQueryProvider`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory)">
      <requires exception="T:System.ArgumentNullException">client != null</requires>
      <exception cref="T:System.ArgumentNullException">client == null</exception>
      <requires exception="T:System.ArgumentNullException">serializerFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">serializerFactory == null</exception>
    </member>
    <member name="M:Linq2Rest.Provider.RestQueryProvider`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory,Linq2Rest.Provider.IExpressionProcessor)">
      <requires exception="T:System.ArgumentNullException">client != null</requires>
      <exception cref="T:System.ArgumentNullException">client == null</exception>
      <requires exception="T:System.ArgumentNullException">serializerFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">serializerFactory == null</exception>
      <requires exception="T:System.ArgumentNullException">expressionProcessor != null</requires>
      <exception cref="T:System.ArgumentNullException">expressionProcessor == null</exception>
    </member>
    <member name="M:Linq2Rest.Provider.RestQueryProvider`1.GetResults(Linq2Rest.Provider.ParameterBuilder)">
      <requires>builder != null</requires>
      <ensures>Contract.Result&lt;IEnumerable&lt;T&gt;&gt;() != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.RestQueryProvider`1.GetIntermediateResults(System.Type,Linq2Rest.Provider.ParameterBuilder)">
      <requires>builder != null</requires>
    </member>
    <member name="T:Linq2Rest.Provider.RestQueryable`1">
      <invariant>_client != null</invariant>
      <invariant>_restQueryProvider != null</invariant>
      <invariant>Expression != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.RestQueryable`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory)">
      <requires exception="T:System.ArgumentNullException">client != null</requires>
      <exception cref="T:System.ArgumentNullException">client == null</exception>
      <requires exception="T:System.ArgumentNullException">serializerFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">serializerFactory == null</exception>
    </member>
    <member name="M:Linq2Rest.Provider.RestQueryable`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory,System.Linq.Expressions.Expression)">
      <requires exception="T:System.ArgumentNullException">client != null</requires>
      <exception cref="T:System.ArgumentNullException">client == null</exception>
      <requires exception="T:System.ArgumentNullException">serializerFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">serializerFactory == null</exception>
      <requires exception="T:System.ArgumentNullException">expression != null</requires>
      <exception cref="T:System.ArgumentNullException">expression == null</exception>
    </member>
    <member name="M:Linq2Rest.Provider.RestQueryable`1.GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable">Contract.Result&lt;IEnumerator&lt;T&gt;&gt;() != null</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable">Contract.Result&lt;IEnumerator&lt;T&gt;&gt;().Model == ((IEnumerable)this).Model</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.RestQueryable`1.System#Collections#IEnumerable#GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable">Contract.Result&lt;IEnumerator&gt;() != null</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable">Contract.Result&lt;IEnumerator&gt;().Model == this.Model</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable">Contract.Result&lt;IEnumerator&gt;().CurrentIndex == -1</ensures>
    </member>
    <member name="T:Linq2Rest.Provider.ParameterBuilder">
      <invariant>_serviceBase != null</invariant>
      <invariant>_serviceBase.Scheme == Uri.UriSchemeHttp || _serviceBase.Scheme == Uri.UriSchemeHttps</invariant>
      <invariant>OrderByParameter != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.ParameterBuilder.#ctor(System.Uri)">
      <requires>serviceBase != null</requires>
      <requires>serviceBase.Scheme == Uri.UriSchemeHttp || serviceBase.Scheme == Uri.UriSchemeHttps</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ParameterBuilder.GetFullUri">
      <ensures>Contract.Result&lt;Uri&gt;() != null</ensures>
      <ensures>Contract.Result&lt;Uri&gt;().Scheme == Uri.UriSchemeHttp || Contract.Result&lt;Uri&gt;().Scheme == Uri.UriSchemeHttps</ensures>
    </member>
    <member name="P:Linq2Rest.Provider.ParameterBuilder.OrderByParameter">
      <getter>
        <ensures>OrderByParameter != null</ensures>
      </getter>
      <setter>
        <requires>OrderByParameter != null</requires>
      </setter>
    </member>
    <member name="T:Linq2Rest.Provider.ExpressionProcessor">
      <invariant>_writer != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionProcessor.#ctor(Linq2Rest.Provider.IExpressionWriter)">
      <requires>writer != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionProcessor.ProcessMethodCall``1(System.Linq.Expressions.MethodCallExpression,Linq2Rest.Provider.ParameterBuilder,System.Func{Linq2Rest.Provider.ParameterBuilder,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Type,Linq2Rest.Provider.ParameterBuilder,System.Collections.IEnumerable})">
      <requires inheritedFrom="M:Linq2Rest.Provider.IExpressionProcessor.ProcessMethodCall``1(System.Linq.Expressions.MethodCallExpression,Linq2Rest.Provider.ParameterBuilder,System.Func{Linq2Rest.Provider.ParameterBuilder,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Type,Linq2Rest.Provider.ParameterBuilder,System.Collections.IEnumerable})" inheritedFromTypeName="IExpressionProcessor">builder != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.IExpressionProcessor.ProcessMethodCall``1(System.Linq.Expressions.MethodCallExpression,Linq2Rest.Provider.ParameterBuilder,System.Func{Linq2Rest.Provider.ParameterBuilder,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Type,Linq2Rest.Provider.ParameterBuilder,System.Collections.IEnumerable})" inheritedFromTypeName="IExpressionProcessor">resultLoader != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.IExpressionProcessor.ProcessMethodCall``1(System.Linq.Expressions.MethodCallExpression,Linq2Rest.Provider.ParameterBuilder,System.Func{Linq2Rest.Provider.ParameterBuilder,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Type,Linq2Rest.Provider.ParameterBuilder,System.Collections.IEnumerable})" inheritedFromTypeName="IExpressionProcessor">intermediateResultLoader != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionProcessor.InvokeEager(System.Linq.Expressions.MethodCallExpression,System.Object)">
      <requires>source != null</requires>
      <requires>methodCall != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionProcessor.ResolveInvocationParameters(System.Collections.IEnumerable,System.Linq.Expressions.MethodCallExpression)">
      <requires>results != null</requires>
      <requires>methodCall != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionProcessor.GetMethodResult``1(System.Linq.Expressions.MethodCallExpression,Linq2Rest.Provider.ParameterBuilder,System.Func{Linq2Rest.Provider.ParameterBuilder,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Type,Linq2Rest.Provider.ParameterBuilder,System.Collections.IEnumerable})">
      <requires>methodCall != null</requires>
      <requires>builder != null</requires>
      <requires>resultLoader != null</requires>
      <requires>intermediateResultLoader != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionProcessor.GetResult``1(System.Linq.Expressions.MethodCallExpression,Linq2Rest.Provider.ParameterBuilder,System.Func{Linq2Rest.Provider.ParameterBuilder,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Type,Linq2Rest.Provider.ParameterBuilder,System.Collections.IEnumerable})">
      <requires>builder != null</requires>
      <requires>methodCall != null</requires>
      <requires>resultLoader != null</requires>
      <requires>intermediateResultLoader != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionProcessor.ExecuteMethod``1(System.Linq.Expressions.MethodCallExpression,Linq2Rest.Provider.ParameterBuilder,System.Func{Linq2Rest.Provider.ParameterBuilder,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Type,Linq2Rest.Provider.ParameterBuilder,System.Collections.IEnumerable})">
      <requires>methodCall != null</requires>
      <requires>resultLoader != null</requires>
      <requires>intermediateResultLoader != null</requires>
      <requires>builder != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.IExpressionProcessor.ProcessMethodCall``1(System.Linq.Expressions.MethodCallExpression,Linq2Rest.Provider.ParameterBuilder,System.Func{Linq2Rest.Provider.ParameterBuilder,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Type,Linq2Rest.Provider.ParameterBuilder,System.Collections.IEnumerable})">
      <requires>builder != null</requires>
      <requires>resultLoader != null</requires>
      <requires>intermediateResultLoader != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.TokenOperatorExtensions.IsCombinationOperation(System.String)">
      <requires exception="T:System.ArgumentNullException">operation != null</requires>
      <exception cref="T:System.ArgumentNullException">operation == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.TokenOperatorExtensions.IsOperation(System.String)">
      <requires exception="T:System.ArgumentNullException">operation != null</requires>
      <exception cref="T:System.ArgumentNullException">operation == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.TokenOperatorExtensions.IsArithmetic(System.String)">
      <requires exception="T:System.ArgumentNullException">operation != null</requires>
      <exception cref="T:System.ArgumentNullException">operation == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.TokenOperatorExtensions.IsImpliedBoolean(System.String)">
      <requires exception="T:System.ArgumentNullException">expression != null</requires>
      <exception cref="T:System.ArgumentNullException">expression == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.TokenOperatorExtensions.EnclosedMatch(System.String)">
      <requires exception="T:System.ArgumentNullException">expression != null</requires>
      <exception cref="T:System.ArgumentNullException">expression == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.TokenOperatorExtensions.IsEnclosed(System.String)">
      <requires exception="T:System.ArgumentNullException">expression != null</requires>
      <exception cref="T:System.ArgumentNullException">expression == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.TokenOperatorExtensions.IsFunction(System.String)">
      <requires exception="T:System.ArgumentNullException">expression != null</requires>
      <exception cref="T:System.ArgumentNullException">expression == null</exception>
    </member>
    <member name="T:Linq2Rest.Parser.TokenSet">
      <invariant>_left != null</invariant>
      <invariant>_right != null</invariant>
      <invariant>_operation != null</invariant>
    </member>
    <member name="M:Linq2Rest.Parser.TokenSet.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object">Contract.Result&lt;string&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.TokenSet.Left">
      <getter>
        <ensures>Contract.Result&lt;string&gt;() != null</ensures>
      </getter>
      <setter>
        <requires exception="T:System.ArgumentNullException">value != null</requires>
      </setter>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
    </member>
    <member name="P:Linq2Rest.Parser.TokenSet.Operation">
      <getter>
        <ensures>Contract.Result&lt;string&gt;() != null</ensures>
      </getter>
      <setter>
        <requires exception="T:System.ArgumentNullException">value != null</requires>
      </setter>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
    </member>
    <member name="P:Linq2Rest.Parser.TokenSet.Right">
      <getter>
        <ensures>Contract.Result&lt;string&gt;() != null</ensures>
      </getter>
      <setter>
        <requires exception="T:System.ArgumentNullException">value != null</requires>
      </setter>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.ShortExpressionFactory.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;ConstantExpression&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.Readers.ShortExpressionFactory.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.get_Handles" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)">
      <requires>token != null</requires>
      <ensures>Contract.Result&lt;ConstantExpression&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.Readers.IValueExpressionFactory.Handles">
      <getter>
        <ensures>Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.DateTimeOffsetExpressionFactory.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;ConstantExpression&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.Readers.DateTimeOffsetExpressionFactory.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.get_Handles" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.IntExpressionFactory.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;ConstantExpression&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.Readers.IntExpressionFactory.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.get_Handles" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.BooleanExpressionFactory.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;ConstantExpression&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.Readers.BooleanExpressionFactory.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.get_Handles" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.ByteArrayExpressionFactory.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;ConstantExpression&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.Readers.ByteArrayExpressionFactory.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.get_Handles" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.LongExpressionFactory.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;ConstantExpression&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.Readers.LongExpressionFactory.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.get_Handles" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.DecimalExpressionFactory.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;ConstantExpression&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.Readers.DecimalExpressionFactory.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.get_Handles" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.DoubleExpressionFactory.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;ConstantExpression&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.Readers.DoubleExpressionFactory.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.get_Handles" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.ByteExpressionFactory.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;ConstantExpression&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.Readers.ByteExpressionFactory.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.get_Handles" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.DateTimeExpressionFactory.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;ConstantExpression&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.Readers.DateTimeExpressionFactory.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.get_Handles" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.UnsignedIntExpressionFactory.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;ConstantExpression&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.Readers.UnsignedIntExpressionFactory.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.get_Handles" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.GuidExpressionFactory.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;ConstantExpression&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.Readers.GuidExpressionFactory.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.get_Handles" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.TimeSpanExpressionFactory.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;ConstantExpression&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.Readers.TimeSpanExpressionFactory.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.get_Handles" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.SingleExpressionFactory.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;ConstantExpression&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.Readers.SingleExpressionFactory.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.get_Handles" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.UnsignedShortExpressionFactory.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;ConstantExpression&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.Readers.UnsignedShortExpressionFactory.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.get_Handles" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.ParameterValueReader.Read(System.Type,System.String,System.IFormatProvider)">
      <requires>token != null</requires>
      <requires>type != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.ParameterValueReader.GetKnownConstant(System.Type,System.String,System.IFormatProvider)">
      <requires>token != null</requires>
      <requires>type != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.ParameterValueReader.GetParseExpression(System.String,System.IFormatProvider,System.Type)">
      <requires>type != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.UnsignedLongExpressionFactory.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;ConstantExpression&gt;() != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.Readers.UnsignedLongExpressionFactory.Handles">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.get_Handles" inheritedFromTypeName="IValueExpressionFactory">Contract.Result&lt;Type&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Parser.ExpressionTokenizer.GetArithmeticToken(System.String)">
      <requires exception="T:System.ArgumentNullException">expression != null</requires>
      <exception cref="T:System.ArgumentNullException">expression == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.ExpressionTokenizer.GetAnyAllFunctionTokens(System.String)">
      <requires>filter != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.ExpressionTokenizer.GetFunctionTokens(System.String)">
      <requires>filter != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.ExpressionTokenizer.GetArithmeticOperationIndex(System.Collections.Generic.IList{System.String})">
      <requires>blocks != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.ExpressionTokenizer.HasOrphanedOpenParenthesis(System.String)">
      <requires>expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.MemberNameResolver.ResolveName(System.Reflection.MemberInfo)">
      <requires inheritedFrom="M:Linq2Rest.Parser.IMemberNameResolver.ResolveName(System.Reflection.MemberInfo)" inheritedFromTypeName="IMemberNameResolver" exception="T:System.ArgumentNullException">member != null</requires>
      <exception cref="T:System.ArgumentNullException">member == null</exception>
      <ensures inheritedFrom="M:Linq2Rest.Parser.IMemberNameResolver.ResolveName(System.Reflection.MemberInfo)" inheritedFromTypeName="IMemberNameResolver">Contract.Result&lt;string&gt;() != null</ensures>
    </member>
    <member name="M:Linq2Rest.Parser.MemberNameResolver.ResolveNameInternal(System.Reflection.MemberInfo)">
      <requires>member != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetFunctionParameterType(System.String)">
      <requires>operation != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetPropertyExpression``1(System.String,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression})">
      <requires>propertyToken != null</requires>
      <requires>parameter != null</requires>
      <requires>lambdaParameters != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetExpressionType``1(Linq2Rest.Parser.TokenSet,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression})">
      <requires>parameter != null</requires>
      <requires>lambdaParameters != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetOperation(System.String,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <requires>token != null</requires>
      <requires>right != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetLeftRightOperation(System.String,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <requires>token != null</requires>
      <requires>left != null</requires>
      <requires>right != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetRightOperation(System.String,System.Linq.Expressions.Expression)">
      <requires>token != null</requires>
      <requires>right != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetFunction(System.String,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression})">
      <requires>function != null</requires>
      <requires>left != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.CreateAnyAllExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Reflection.MethodInfo)">
      <requires>left != null</requires>
      <requires>right != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetNonNullableType(System.Type)">
      <requires>type != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.SupportsNegate(System.Type)">
      <requires>type != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.CreateExpression``1(System.String,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression},System.Type,System.IFormatProvider)">
      <requires>filter != null</requires>
      <requires>sourceParameter != null</requires>
      <requires>lambdaParameters != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetTokenExpression``1(System.Linq.Expressions.ParameterExpression,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression},System.Type,System.IFormatProvider,Linq2Rest.Parser.TokenSet[])">
      <requires>tokens != null</requires>
      <requires>parameter != null</requires>
      <requires>lambdaParameters != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetArithmeticExpression``1(System.String,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression},System.Type,System.IFormatProvider)">
      <requires>filter != null</requires>
      <requires>parameter != null</requires>
      <requires>lambdaParameters != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetAnyAllFunctionExpression``1(System.String,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression},System.IFormatProvider)">
      <requires>filter != null</requires>
      <requires>sourceParameter != null</requires>
      <requires>lambdaParameters != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetFunctionExpression``1(System.String,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression},System.Type,System.IFormatProvider)">
      <requires>filter != null</requires>
      <requires>sourceParameter != null</requires>
      <requires>lambdaParameters != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.ParameterVisitor.GetParameters(System.Linq.Expressions.Expression)">
      <requires>expr != null</requires>
      <ensures>Contract.Result&lt;IEnumerable&lt;ParameterExpression&gt;&gt;() != null</ensures>
    </member>
    <member name="M:Linq2Rest.Parser.FunctionTokenSet.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object">Contract.Result&lt;string&gt;() != null</ensures>
    </member>
    <member name="M:Linq2Rest.ModelFilter`1.Filter(System.Collections.Generic.IEnumerable{`0})">
      <requires inheritedFrom="M:Linq2Rest.IModelFilter`1.Filter(System.Collections.Generic.IEnumerable{`0})" inheritedFromTypeName="IModelFilter" exception="T:System.ArgumentNullException">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
    </member>
    <member name="M:Linq2Rest.GeneralExtensions.IsAnonymousType(System.Type)">
      <requires exception="T:System.ArgumentNullException">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:Linq2Rest.GeneralExtensions.Capitalize(System.String)">
      <requires>!string.IsNullOrEmpty(input)</requires>
    </member>
  </members>
</doc>